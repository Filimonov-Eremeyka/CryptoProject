# SECTION 1: imports
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import argparse
import sys
import os
from pathlib import Path
import threading
from utils.data_utils import csv_to_parquet, resample

# SECTION 2: parse_cli()
def parse_cli():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä CSV –≤ Parquet —Å —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥–æ–º')
    parser.add_argument('--file', type=str, help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É')
    parser.add_argument('--tf', nargs='+', choices=['5m', '15m', '1h'], 
                       help='–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (5m, 15m, 1h)')
    return parser.parse_args()

# SECTION 3: run_cli(file, tfs)
def run_cli(file, tfs):
    """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ CLI"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file):
            print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º CSV –≤ Parquet
        print("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è CSV –≤ Parquet...")
        parquet_path = csv_to_parquet(file)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        filename = Path(file).stem
        symbol = filename.replace('_1m', '')
        
        # –†–µ—Å—ç–º–ø–ª–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        print("–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤...")
        for tf in tfs:
            resample(symbol, tf)
        
        print("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

# SECTION 4: run_gui()
def run_gui():
    """–ó–∞–ø—É—Å–∫ GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    class ConverterGUI:
        def __init__(self, root):
            self.root = root
            self.root.title("CSV ‚Üí Parquet –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä")
            self.root.geometry("500x400")
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            self.selected_file = tk.StringVar()
            self.tf_vars = {
                '5m': tk.BooleanVar(value=True),
                '15m': tk.BooleanVar(value=True), 
                '1h': tk.BooleanVar(value=True)
            }
            
            self.create_widgets()
        
        def create_widgets(self):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_label = tk.Label(self.root, text="CSV ‚Üí Parquet –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", 
                                 font=("Arial", 16, "bold"))
            title_label.pack(pady=10)
            
            # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
            file_frame = tk.Frame(self.root)
            file_frame.pack(pady=10, padx=20, fill='x')
            
            tk.Label(file_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª:", font=("Arial", 10)).pack(anchor='w')
            
            file_select_frame = tk.Frame(file_frame)
            file_select_frame.pack(fill='x', pady=5)
            
            self.file_entry = tk.Entry(file_select_frame, textvariable=self.selected_file, 
                                     state='readonly', font=("Arial", 9))
            self.file_entry.pack(side='left', fill='x', expand=True)
            
            tk.Button(file_select_frame, text="–û–±–∑–æ—Ä...", 
                     command=self.select_file).pack(side='right', padx=(5, 0))
            
            # –í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            tf_frame = tk.LabelFrame(self.root, text="–°–æ–∑–¥–∞—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:", 
                                   font=("Arial", 10, "bold"))
            tf_frame.pack(pady=20, padx=20, fill='x')
            
            for tf in ['5m', '15m', '1h']:
                cb = tk.Checkbutton(tf_frame, text=f"{tf} (—Ä–µ—Å—ç–º–ø–ª –∏–∑ 1m)", 
                                  variable=self.tf_vars[tf], font=("Arial", 9))
                cb.pack(anchor='w', padx=10, pady=2)
            
            # –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            self.convert_btn = tk.Button(self.root, text="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                                       command=self.start_conversion, 
                                       font=("Arial", 12, "bold"),
                                       bg="#4CAF50", fg="white", 
                                       state='disabled')
            self.convert_btn.pack(pady=20)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            self.progress = ttk.Progressbar(self.root, mode='indeterminate')
            self.progress.pack(pady=10, padx=20, fill='x')
            
            # –õ–æ–≥
            log_frame = tk.Frame(self.root)
            log_frame.pack(pady=10, padx=20, fill='both', expand=True)
            
            tk.Label(log_frame, text="–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", font=("Arial", 10)).pack(anchor='w')
            
            self.log_text = tk.Text(log_frame, height=8, font=("Consolas", 9))
            scrollbar = tk.Scrollbar(log_frame, command=self.log_text.yview)
            self.log_text.config(yscrollcommand=scrollbar.set)
            
            self.log_text.pack(side='left', fill='both', expand=True)
            scrollbar.pack(side='right', fill='y')
        
        def select_file(self):
            """–í—ã–±–æ—Ä CSV —Ñ–∞–π–ª–∞"""
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª",
                filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
                initialdir="C:/CryptoProject/backtest/data/history"
            )
            
            if file_path:
                self.selected_file.set(file_path)
                self.convert_btn.config(state='normal')
                self.log(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {file_path}")
        
        def log(self, message):
            """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
            self.log_text.insert('end', message + '\n')
            self.log_text.see('end')
            self.root.update_idletasks()
        
        def start_conversion(self):
            """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
            if not self.selected_file.get():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
            selected_tfs = [tf for tf, var in self.tf_vars.items() if var.get()]
            
            if not selected_tfs:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.convert_btn.config(state='disabled')
            self.progress.start()
            
            thread = threading.Thread(target=self.convert_file, args=(selected_tfs,))
            thread.daemon = True
            thread.start()
        
        def convert_file(self, selected_tfs):
            """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞"""
            try:
                file_path = self.selected_file.get()
                self.log("–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º CSV –≤ Parquet
                self.log("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è CSV ‚Üí Parquet...")
                parquet_path = csv_to_parquet(file_path)
                self.log(f"‚úì –°–æ–∑–¥–∞–Ω: {parquet_path}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                filename = Path(file_path).stem
                symbol = filename.replace('_1m', '')
                
                # –†–µ—Å—ç–º–ø–ª–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                self.log("–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤...")
                for tf in selected_tfs:
                    self.log(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {tf}...")
                    resample(symbol, tf)
                    self.log(f"‚úì –°–æ–∑–¥–∞–Ω: {symbol}_{tf}.parquet")
                
                self.log("üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞: {str(e)}"
                self.log(error_msg)
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            
            finally:
                self.progress.stop()
                self.convert_btn.config(state='normal')
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º GUI
    root = tk.Tk()
    app = ConverterGUI(root)
    root.mainloop()

# SECTION 5: main()
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_cli()
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ - –∑–∞–ø—É—Å–∫–∞–µ–º CLI
    if args.file and args.tf:
        success = run_cli(args.file, args.tf)
        sys.exit(0 if success else 1)
    
    # –ò–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º GUI
    run_gui()

if __name__ == "__main__":
    main()